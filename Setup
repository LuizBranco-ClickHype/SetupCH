#!/bin/bash

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
##                                          CLICK HYPE                                        ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

## Cores
laranja="\e[38;5;208m"
verde="\e[32m"
branco="\e[97m"
vermelho="\e[91m"
reset="\e[0m"

## Diretório principal
DIR_HYPE="/opt/hype"

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
##                                          CLICK HYPE                                        ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

nome_aviso(){
clear
echo ""
echo -e "$laranja===================================================================================================$reset"
echo -e "$laranja=                                                                                                 $laranja=$reset"
echo -e "$laranja=                     $branco  █████╗     ██╗   ██╗    ██╗    ███████╗     ██████╗                       $laranja=$reset"
echo -e "$laranja=                     $branco ██╔══██╗    ██║   ██║    ██║    ██╔════╝    ██╔═══██╗                      $laranja=$reset"
echo -e "$laranja=                     $branco ███████║    ██║   ██║    ██║    ███████╗    ██║   ██║                      $laranja=$reset"
echo -e "$laranja=                     $branco ██╔══██║    ╚██╗ ██╔╝    ██║    ╚════██║    ██║   ██║                      $laranja=$reset"
echo -e "$laranja=                     $branco ██║  ██║     ╚████╔╝     ██║    ███████║    ╚██████╔╝                      $laranja=$reset"
echo -e "$laranja=                     $branco ╚═╝  ╚═╝      ╚═══╝      ╚═╝    ╚══════╝     ╚═════╝                       $laranja=$reset"
echo -e "$laranja=                                                                                                 $laranja=$reset"
echo -e "$laranja===================================================================================================$reset"
echo ""
echo ""
}

nome_atualizando(){
    clear
    echo ""
    echo -e "$laranja===================================================================================================$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja=    $branco  █████╗ ████████╗██╗   ██╗ █████╗ ██╗     ██╗███████╗ █████╗ ███╗   ██╗██████╗  ██████╗     $laranja=$reset"
    echo -e "$laranja=    $branco ██╔══██╗╚══██╔══╝██║   ██║██╔══██╗██║     ██║╚══███╔╝██╔══██╗████╗  ██║██╔══██╗██╔═══██╗    $laranja=$reset"
    echo -e "$laranja=    $branco ███████║   ██║   ██║   ██║███████║██║     ██║  ███╔╝ ███████║██╔██╗ ██║██║  ██║██║   ██║    $laranja=$reset"
    echo -e "$laranja=    $branco ██╔══██║   ██║   ██║   ██║██╔══██║██║     ██║ ███╔╝  ██╔══██║██║╚██╗██║██║  ██║██║   ██║    $laranja=$reset"
    echo -e "$laranja=    $branco ██║  ██║   ██║   ╚██████╔╝██║  ██║███████╗██║███████╗██║  ██║██║ ╚████║██████╔╝╚██████╔╝    $laranja=$reset"
    echo -e "$laranja=    $branco ╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝     $laranja=$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja===================================================================================================$reset"
    echo ""
    echo ""
}

nome_iniciando(){
    clear
    echo ""
    echo -e "$laranja===================================================================================================$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja=                  $branco ██╗███╗   ██╗██╗ ██████╗██╗ █████╗ ███╗   ██╗██████╗  ██████╗                 $laranja=$reset"
    echo -e "$laranja=                  $branco ██║████╗  ██║██║██╔════╝██║██╔══██╗████╗  ██║██╔══██╗██╔═══██╗                $laranja=$reset"
    echo -e "$laranja=                  $branco ██║██╔██╗ ██║██║██║     ██║███████║██╔██╗ ██║██║  ██║██║   ██║                $laranja=$reset"
    echo -e "$laranja=                  $branco ██║██║╚██╗██║██║██║     ██║██╔══██║██║╚██╗██║██║  ██║██║   ██║                $laranja=$reset"
    echo -e "$laranja=                  $branco ██║██║ ╚████║██║╚██████╗██║██║  ██║██║ ╚████║██████╔╝╚██████╔╝                $laranja=$reset"
    echo -e "$laranja=                  $branco ╚═╝╚═╝  ╚═══╝╚═╝ ╚═════╝╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝                 $laranja=$reset"
    echo -e "$laranja=                                              v. 1.0.0                                           $laranja=$reset"
    echo -e "$laranja===================================================================================================$reset"
    echo ""
    echo ""
}

nome_verificando(){
    clear
    echo ""
    echo -e "$laranja===================================================================================================$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja=       $branco ██╗   ██╗███████╗██████╗ ██╗███████╗██╗ ██████╗ █████╗ ███╗   ██╗██████╗  ██████╗       $laranja=$reset"
    echo -e "$laranja=       $branco ██║   ██║██╔════╝██╔══██╗██║██╔════╝██║██╔════╝██╔══██╗████╗  ██║██╔══██╗██╔═══██╗      $laranja=$reset"
    echo -e "$laranja=       $branco ██║   ██║█████╗  ██████╔╝██║█████╗  ██║██║     ███████║██╔██╗ ██║██║  ██║██║   ██║      $laranja=$reset"
    echo -e "$laranja=       $branco ╚██╗ ██╔╝██╔══╝  ██╔══██╗██║██╔══╝  ██║██║     ██╔══██║██║╚██╗██║██║  ██║██║   ██║      $laranja=$reset"
    echo -e "$laranja=       $branco  ╚████╔╝ ███████╗██║  ██║██║██║     ██║╚██████╗██║  ██║██║ ╚████║██████╔╝╚██████╔╝      $laranja=$reset"
    echo -e "$laranja=       $branco   ╚═══╝  ╚══════╝╚═╝  ╚═╝╚═╝╚═╝     ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝       $laranja=$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja===================================================================================================$reset"
    echo ""
    echo ""
}

desc_ver(){
    echo -e "                            Este script recomenda o uso do Ubuntu$verde 20.04$branco.$reset"
    echo ""
} 

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
##                                 FUNÇÕES DE FERRAMENTAS                                      ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

## Função para instalar docker se necessário
instalar_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "$laranja Docker não encontrado, instalando... $reset"
        
        # Remover versões antigas se existirem
        sudo apt-get remove -y docker docker-engine docker.io containerd runc > /dev/null 2>&1
        
        # Instalar dependências
        sudo apt-get update > /dev/null 2>&1
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release > /dev/null 2>&1
        
        # Adicionar chave GPG oficial do Docker
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg > /dev/null 2>&1
        
        # Configurar repositório estável
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        # Instalar Docker Engine
        sudo apt-get update > /dev/null 2>&1
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io > /dev/null 2>&1
        
        # Instalar Docker Compose
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose > /dev/null 2>&1
        sudo chmod +x /usr/local/bin/docker-compose > /dev/null 2>&1
        
        # Adicionar usuário ao grupo docker
        sudo usermod -aG docker $USER > /dev/null 2>&1
        
        echo -e "$verde Docker instalado com sucesso! $reset"
    else
        echo -e "$verde Docker já está instalado. $reset"
    fi
}

## Função para criar diretório da aplicação
criar_diretorio_app() {
    local app_name=$1
    mkdir -p $DIR_HYPE/apps/$app_name
    echo "$DIR_HYPE/apps/$app_name"
}

## Função para obter ou gerar senha
obter_senha() {
    # Gera uma senha de 16 caracteres
    local senha=$(tr -dc 'A-Za-z0-9!#$%&()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c 16)
    echo $senha
}

## Função para confirmar se o usuário deseja prosseguir
confirmar_instalacao() {
    local app_name=$1
    echo -e "$laranja Você está prestes a instalar $verde$app_name$reset. "
    read -p "Deseja continuar? (s/n): " confirmacao
    
    if [[ $confirmacao != "s" && $confirmacao != "S" ]]; then
        echo -e "$vermelho Instalação cancelada pelo usuário. $reset"
        exit 0
    fi
}

## Função para solicitar domínio
solicitar_dominio() {
    read -p "Digite o domínio para a aplicação (ex: app.example.com): " dominio
    
    if [ -z "$dominio" ]; then
        echo -e "$vermelho Erro: Domínio não pode ser vazio. $reset"
        solicitar_dominio
    fi
    
    echo $dominio
}

## Função para criar arquivo docker-compose
criar_docker_compose() {
    local app_dir=$1
    local compose_content=$2
    
    echo "$compose_content" > "$app_dir/docker-compose.yml"
    echo -e "$laranja Arquivo docker-compose.yml criado em $verde$app_dir $reset"
}

## Menu principal
menu_principal() {
    nome_iniciando
    echo -e "$laranja Selecione uma opção: $reset"
    echo -e "$laranja 1. $verde Instalar ferramentas $reset"
    echo -e "$laranja 2. $verde Verificar status dos serviços $reset"
    echo -e "$laranja 3. $verde Sair $reset"
    echo ""
    read -p "Opção: " opcao
    
    case $opcao in
        1)
            menu_ferramentas
            ;;
        2)
            verificar_status
            ;;
        3)
            echo -e "$verde Saindo... $reset"
            exit 0
            ;;
        *)
            echo -e "$vermelho Opção inválida! $reset"
            sleep 2
            menu_principal
            ;;
    esac
}

## Menu de ferramentas
menu_ferramentas() {
    nome_iniciando
    echo -e "$laranja Selecione uma ferramenta para instalar: $reset"
    echo -e "$laranja 1. $verde Traefik $reset"
    echo -e "$laranja 2. $verde Portainer $reset"
    echo -e "$laranja 3. $verde Chatwoot $reset"
    echo -e "$laranja 4. $verde Evolution API $reset"
    echo -e "$laranja 5. $verde MinIO $reset"
    echo -e "$laranja 6. $verde Typebot $reset"
    echo -e "$laranja 7. $verde N8N $reset"
    echo -e "$laranja 0. $verde Voltar $reset"
    echo ""
    read -p "Opção: " opcao
    
    case $opcao in
        1)
            instalar_traefik
            ;;
        2)
            instalar_portainer
            ;;
        3)
            instalar_chatwoot
            ;;
        4)
            instalar_evolution_api
            ;;
        5)
            instalar_minio
            ;;
        6)
            instalar_typebot
            ;;
        7)
            instalar_n8n
            ;;
        0)
            menu_principal
            ;;
        *)
            echo -e "$vermelho Opção inválida! $reset"
            sleep 2
            menu_ferramentas
            ;;
    esac
}

## Função para verificar status dos serviços
verificar_status() {
    nome_verificando
    echo -e "$laranja Verificando status dos serviços instalados... $reset"
    echo ""
    
    if [ -d "$DIR_HYPE/apps" ]; then
        for app_dir in $DIR_HYPE/apps/*; do
            if [ -d "$app_dir" ]; then
                app_name=$(basename "$app_dir")
                echo -e "$verde $app_name: $reset"
                
                if [ -f "$app_dir/docker-compose.yml" ]; then
                    (cd "$app_dir" && docker-compose ps)
                    echo ""
                else
                    echo -e "$vermelho Arquivo docker-compose.yml não encontrado! $reset"
                    echo ""
                fi
            fi
        done
    else
        echo -e "$vermelho Nenhuma aplicação instalada! $reset"
    fi
    
    read -p "Pressione Enter para continuar..."
    menu_principal
}

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
##                                     INÍCIO DO SCRIPT                                       ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

# Verificar se o script está sendo executado como root
if [ "$EUID" -ne 0 ]; then
    echo -e "$vermelho Este script precisa ser executado como root (use sudo). $reset"
    exit 1
fi

# Criar diretório principal
mkdir -p $DIR_HYPE/apps

# Instalar dependências
nome_atualizando
apt-get update > /dev/null 2>&1
apt-get install -y curl apache2-utils > /dev/null 2>&1
instalar_docker

# Iniciar menu principal
menu_principal