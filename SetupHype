#!/bin/bash

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
##                                          CLICK HYPE                                        ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

versao() {
echo -e "                                   \e[97mVersão do Setup: \e[32mv. 1.0.0\e[0m

                  "
echo -e "\e[32mclickhype.com.br/whatsapp      \e[97m<----- Grupos no WhatsApp ----->     \e[32mclickhype.com.br/whatsapp2\e[0m"
}

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
##                                          CLICK HYPE                                        ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

## Cores do Setup
laranja="\e[38;5;208m"
verde="\e[32m"
branco="\e[97m"
vermelho="\e[91m"
reset="\e[0m"

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
##                                          CLICK HYPE                                        ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

menu_instalador="1"

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
##                                          CLICK HYPE                                        ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

home_directory="$HOME"
dados_vps="${home_directory}/dados_vps/dados_vps"

dados() {
    nome_servidor=$(grep "Nome do Servidor:" "$dados_vps" | awk -F': ' '{print $2}')
    nome_rede_interna=$(grep "Rede interna:" "$dados_vps" | awk -F': ' '{print $2}')
}

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
##                                          CLICK HYPE                                        ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

## Licença do Setup

## copia
direitos_setup() {
    clear
    echo ""
    echo -e "$laranja===================================================================================================$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja=                     $branco  █████╗     ██╗   ██╗    ██╗    ███████╗     ██████╗                       $laranja=$reset"
    echo -e "$laranja=                     $branco ██╔══██╗    ██║   ██║    ██║    ██╔════╝    ██╔═══██╗                      $laranja=$reset"
    echo -e "$laranja=                     $branco ███████║    ██║   ██║    ██║    ███████╗    ██║   ██║                      $laranja=$reset"
    echo -e "$laranja=                     $branco ██╔══██║    ╚██╗ ██╔╝    ██║    ╚════██║    ██║   ██║                      $laranja=$reset"
    echo -e "$laranja=                     $branco ██║  ██║     ╚████╔╝     ██║    ███████║    ╚██████╔╝                      $laranja=$reset"
    echo -e "$laranja=                     $branco ╚═╝  ╚═╝      ╚═══╝      ╚═╝    ╚══════╝     ╚═════╝                       $laranja=$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja===================================================================================================$reset"
    echo -e "\n\n"
    versao
    echo -e "\n\n"
    echo -e "$branco Setup desenvolvido por$laranja ClickHype$reset"
    echo -e "$branco Com todos os direitos reservados."
    sleep 3
}

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
##                                          CLICK HYPE                                        ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

## Funções do Setup

nome_aviso(){
    clear
    echo ""
    echo -e "$laranja===================================================================================================$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja=                     $branco  █████╗     ██╗   ██╗    ██╗    ███████╗     ██████╗                       $laranja=$reset"
    echo -e "$laranja=                     $branco ██╔══██╗    ██║   ██║    ██║    ██╔════╝    ██╔═══██╗                      $laranja=$reset"
    echo -e "$laranja=                     $branco ███████║    ██║   ██║    ██║    ███████╗    ██║   ██║                      $laranja=$reset"
    echo -e "$laranja=                     $branco ██╔══██║    ╚██╗ ██╔╝    ██║    ╚════██║    ██║   ██║                      $laranja=$reset"
    echo -e "$laranja=                     $branco ██║  ██║     ╚████╔╝     ██║    ███████║    ╚██████╔╝                      $laranja=$reset"
    echo -e "$laranja=                     $branco ╚═╝  ╚═╝      ╚═══╝      ╚═╝    ╚══════╝     ╚═════╝                       $laranja=$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja===================================================================================================$reset"
    echo ""
    echo ""
}

nome_atualizando(){
    clear
    echo ""
    echo -e "$laranja===================================================================================================$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja=    $branco  █████╗ ████████╗██╗   ██╗ █████╗ ██╗     ██╗███████╗ █████╗ ███╗   ██╗██████╗  ██████╗     $laranja=$reset"
    echo -e "$laranja=    $branco ██╔══██╗╚══██╔══╝██║   ██║██╔══██╗██║     ██║╚══███╔╝██╔══██╗████╗  ██║██╔══██╗██╔═══██╗    $laranja=$reset"
    echo -e "$laranja=    $branco ███████║   ██║   ██║   ██║███████║██║     ██║  ███╔╝ ███████║██╔██╗ ██║██║  ██║██║   ██║    $laranja=$reset"
    echo -e "$laranja=    $branco ██╔══██║   ██║   ██║   ██║██╔══██║██║     ██║ ███╔╝  ██╔══██║██║╚██╗██║██║  ██║██║   ██║    $laranja=$reset"
    echo -e "$laranja=    $branco ██║  ██║   ██║   ╚██████╔╝██║  ██║███████╗██║███████╗██║  ██║██║ ╚████║██████╔╝╚██████╔╝    $laranja=$reset"
    echo -e "$laranja=    $branco ╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝     $laranja=$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja===================================================================================================$reset"
    echo ""
    echo ""
}

nome_iniciando(){
    clear
    echo ""
    echo -e "$laranja===================================================================================================$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja=                  $branco ██╗███╗   ██╗██╗ ██████╗██╗ █████╗ ███╗   ██╗██████╗  ██████╗                 $laranja=$reset"
    echo -e "$laranja=                  $branco ██║████╗  ██║██║██╔════╝██║██╔══██╗████╗  ██║██╔══██╗██╔═══██╗                $laranja=$reset"
    echo -e "$laranja=                  $branco ██║██╔██╗ ██║██║██║     ██║███████║██╔██╗ ██║██║  ██║██║   ██║                $laranja=$reset"
    echo -e "$laranja=                  $branco ██║██║╚██╗██║██║██║     ██║██╔══██║██║╚██╗██║██║  ██║██║   ██║                $laranja=$reset"
    echo -e "$laranja=                  $branco ██║██║ ╚████║██║╚██████╗██║██║  ██║██║ ╚████║██████╔╝╚██████╔╝                $laranja=$reset"
    echo -e "$laranja=                  $branco ╚═╝╚═╝  ╚═══╝╚═╝ ╚═════╝╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝                 $laranja=$reset"
    echo -e "$laranja=                                              v. 1.0.0                                           $laranja=$reset"
    echo -e "$laranja===================================================================================================$reset"
    echo ""
    echo ""
}

nome_verificando(){
    clear
    echo ""
    echo -e "$laranja===================================================================================================$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja=       $branco ██╗   ██╗███████╗██████╗ ██╗███████╗██╗ ██████╗ █████╗ ███╗   ██╗██████╗  ██████╗       $laranja=$reset"
    echo -e "$laranja=       $branco ██║   ██║██╔════╝██╔══██╗██║██╔════╝██║██╔════╝██╔══██╗████╗  ██║██╔══██╗██╔═══██╗      $laranja=$reset"
    echo -e "$laranja=       $branco ██║   ██║█████╗  ██████╔╝██║█████╗  ██║██║     ███████║██╔██╗ ██║██║  ██║██║   ██║      $laranja=$reset"
    echo -e "$laranja=       $branco ╚██╗ ██╔╝██╔══╝  ██╔══██╗██║██╔══╝  ██║██║     ██╔══██║██║╚██╗██║██║  ██║██║   ██║      $laranja=$reset"
    echo -e "$laranja=       $branco  ╚████╔╝ ███████╗██║  ██║██║██║     ██║╚██████╗██║  ██║██║ ╚████║██████╔╝╚██████╔╝      $laranja=$reset"
    echo -e "$laranja=       $branco   ╚═══╝  ╚══════╝╚═╝  ╚═╝╚═╝╚═╝     ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝       $laranja=$reset"
    echo -e "$laranja=                                                                                                 $laranja=$reset"
    echo -e "$laranja===================================================================================================$reset"
    echo ""
    echo ""
}

desc_ver(){
    echo -e "                            Este script recomenda o uso do Ubuntu$verde 20.04$branco.$reset"
    echo ""
}

## Diretório principal para instalações
DIR_HYPE="/opt/hype"

## Função para instalar docker se necessário
instalar_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "$laranja Docker não encontrado, instalando... $reset"
        
        # Remover versões antigas se existirem
        sudo apt-get remove -y docker docker-engine docker.io containerd runc > /dev/null 2>&1
        
        # Instalar dependências
        sudo apt-get update > /dev/null 2>&1
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release > /dev/null 2>&1
        
        # Adicionar chave GPG oficial do Docker
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg > /dev/null 2>&1
        
        # Configurar repositório estável
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        # Instalar Docker Engine
        sudo apt-get update > /dev/null 2>&1
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io > /dev/null 2>&1
        
        # Instalar Docker Compose
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose > /dev/null 2>&1
        sudo chmod +x /usr/local/bin/docker-compose > /dev/null 2>&1
        
        # Adicionar usuário ao grupo docker
        sudo usermod -aG docker $USER > /dev/null 2>&1
        
        echo -e "$verde Docker instalado com sucesso! $reset"
    else
        echo -e "$verde Docker já está instalado. $reset"
    fi
}

## Função para criar diretório da aplicação
criar_diretorio_app() {
    local app_name=$1
    mkdir -p $DIR_HYPE/apps/$app_name
    echo "$DIR_HYPE/apps/$app_name"
}

## Função para obter ou gerar senha
obter_senha() {
    # Gera uma senha de 16 caracteres
    local senha=$(tr -dc 'A-Za-z0-9!#$%&()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c 16)
    echo $senha
}

## Função para confirmar se o usuário deseja prosseguir
confirmar_instalacao() {
    local app_name=$1
    echo -e "$laranja Você está prestes a instalar $verde$app_name$reset. "
    read -p "Deseja continuar? (s/n): " confirmacao
    
    if [[ $confirmacao != "s" && $confirmacao != "S" ]]; then
        echo -e "$vermelho Instalação cancelada pelo usuário. $reset"
        exit 0
    fi
}

## Função para solicitar domínio
solicitar_dominio() {
    read -p "Digite o domínio para a aplicação (ex: app.example.com): " dominio
    
    if [ -z "$dominio" ]; then
        echo -e "$vermelho Erro: Domínio não pode ser vazio. $reset"
        solicitar_dominio
    fi
    
    echo $dominio
}

## Função para criar arquivo docker-compose
criar_docker_compose() {
    local app_dir=$1
    local compose_content=$2
    
    echo "$compose_content" > "$app_dir/docker-compose.yml"
    echo -e "$laranja Arquivo docker-compose.yml criado em $verde$app_dir $reset"
}

## Menu principal estendido com mais opções
menu_principal_estendido() {
    nome_iniciando
    echo -e "$laranja Selecione uma opção: $reset"
    echo -e "$laranja 1. $verde Instalar ferramentas $reset"
    echo -e "$laranja 2. $verde Verificar status dos serviços $reset"
    echo -e "$laranja 3. $verde Gerenciar backups $reset"
    echo -e "$laranja 4. $verde Configurações avançadas $reset"
    echo -e "$laranja 5. $verde Monitoramento do sistema $reset"
    echo -e "$laranja 6. $verde Sair $reset"
    echo ""
    read -p "Opção: " opcao
    
    case $opcao in
        1)
            menu_ferramentas_estendido
            ;;
        2)
            verificar_status_detalhado
            ;;
        3)
            menu_backups
            ;;
        4)
            menu_configuracoes
            ;;
        5)
            menu_monitoramento
            ;;
        6)
            echo -e "$verde Saindo... $reset"
            exit 0
            ;;
        *)
            echo -e "$vermelho Opção inválida! $reset"
            sleep 2
            menu_principal_estendido
            ;;
    esac
}

## Menu de ferramentas estendido
menu_ferramentas_estendido() {
    nome_iniciando
    echo -e "$laranja Selecione uma ferramenta para instalar: $reset"
    echo -e "$laranja 1. $verde Traefik $reset"
    echo -e "$laranja 2. $verde Portainer $reset"
    echo -e "$laranja 3. $verde Chatwoot $reset"
    echo -e "$laranja 4. $verde Evolution API $reset"
    echo -e "$laranja 5. $verde MinIO $reset"
    echo -e "$laranja 6. $verde Typebot $reset"
    echo -e "$laranja 7. $verde N8N $reset"
    echo -e "$laranja 8. $verde Flowise $reset"
    echo -e "$laranja 9. $verde PgAdmin 4 $reset"
    echo -e "$laranja 10. $verde Nocobase $reset"
    echo -e "$laranja 11. $verde Botpress $reset"
    echo -e "$laranja 12. $verde Wordpress $reset"
    echo -e "$laranja 13. $verde Baserow $reset"
    echo -e "$laranja 14. $verde MongoDB $reset"
    echo -e "$laranja 15. $verde RabbitMQ $reset"
    echo -e "$laranja 0. $verde Voltar $reset"
    echo ""
    read -p "Opção: " opcao
    
    case $opcao in
        1)
            instalar_traefik
            ;;
        2)
            instalar_portainer
            ;;
        3)
            instalar_chatwoot
            ;;
        4)
            instalar_evolution_api
            ;;
        5)
            instalar_minio
            ;;
        6)
            instalar_typebot
            ;;
        7)
            instalar_n8n
            ;;
        8)
            instalar_flowise
            ;;
        9)
            instalar_pgadmin
            ;;
        10)
            instalar_nocobase
            ;;
        11)
            instalar_botpress
            ;;
        12)
            instalar_wordpress
            ;;
        13)
            instalar_baserow
            ;;
        14)
            instalar_mongodb
            ;;
        15)
            instalar_rabbitmq
            ;;
        0)
            menu_principal_estendido
            ;;
        *)
            echo -e "$vermelho Opção inválida! $reset"
            sleep 2
            menu_ferramentas_estendido
            ;;
    esac
}

## Função para verificação detalhada dos serviços
verificar_status_detalhado() {
    nome_verificando
    echo -e "$laranja Verificando status detalhado dos serviços instalados... $reset"
    echo ""
    
    if [ -d "$DIR_HYPE/apps" ]; then
        for app_dir in $DIR_HYPE/apps/*; do
            if [ -d "$app_dir" ]; then
                app_name=$(basename "$app_dir")
                echo -e "$verde $app_name: $reset"
                
                if [ -f "$app_dir/docker-compose.yml" ]; then
                    (cd "$app_dir" && docker-compose ps)
                    echo -e "$branco Uso de recursos: $reset"
                    docker stats --no-stream $(docker ps --filter "name=$app_name" --format "{{.Names}}")
                    echo ""
                else
                    echo -e "$vermelho Arquivo docker-compose.yml não encontrado! $reset"
                    echo ""
                fi
            fi
        done
    else
        echo -e "$vermelho Nenhuma aplicação instalada! $reset"
    fi
    
    read -p "Pressione Enter para continuar..."
    menu_principal_estendido
}

## Menu de gerenciamento de backups
menu_backups() {
    nome_iniciando
    echo -e "$laranja Gerenciamento de Backups: $reset"
    echo -e "$laranja 1. $verde Criar backup de todas as aplicações $reset"
    echo -e "$laranja 2. $verde Criar backup de uma aplicação específica $reset"
    echo -e "$laranja 3. $verde Restaurar backup $reset"
    echo -e "$laranja 4. $verde Listar backups disponíveis $reset"
    echo -e "$laranja 0. $verde Voltar $reset"
    echo ""
    read -p "Opção: " opcao
    
    case $opcao in
        1)
            criar_backup_todas
            ;;
        2)
            criar_backup_especifica
            ;;
        3)
            restaurar_backup
            ;;
        4)
            listar_backups
            ;;
        0)
            menu_principal_estendido
            ;;
        *)
            echo -e "$vermelho Opção inválida! $reset"
            sleep 2
            menu_backups
            ;;
    esac
}

## Menu de configurações avançadas
menu_configuracoes() {
    nome_iniciando
    echo -e "$laranja Configurações Avançadas: $reset"
    echo -e "$laranja 1. $verde Configurar firewall $reset"
    echo -e "$laranja 2. $verde Configurar certificados SSL $reset"
    echo -e "$laranja 3. $verde Configurar agendamento de backups $reset"
    echo -e "$laranja 4. $verde Configurar limites de recursos $reset"
    echo -e "$laranja 0. $verde Voltar $reset"
    echo ""
    read -p "Opção: " opcao
    
    case $opcao in
        1)
            configurar_firewall
            ;;
        2)
            configurar_ssl
            ;;
        3)
            configurar_agendamento
            ;;
        4)
            configurar_recursos
            ;;
        0)
            menu_principal_estendido
            ;;
        *)
            echo -e "$vermelho Opção inválida! $reset"
            sleep 2
            menu_configuracoes
            ;;
    esac
}

## Menu de monitoramento do sistema
menu_monitoramento() {
    nome_iniciando
    echo -e "$laranja Monitoramento do Sistema: $reset"
    echo -e "$laranja 1. $verde Verificar uso de CPU e memória $reset"
    echo -e "$laranja 2. $verde Verificar uso de disco $reset"
    echo -e "$laranja 3. $verde Verificar logs dos containers $reset"
    echo -e "$laranja 4. $verde Verificar tráfego de rede $reset"
    echo -e "$laranja 0. $verde Voltar $reset"
    echo ""
    read -p "Opção: " opcao
    
    case $opcao in
        1)
            verificar_uso_recursos
            ;;
        2)
            verificar_uso_disco
            ;;
        3)
            verificar_logs
            ;;
        4)
            verificar_trafego
            ;;
        0)
            menu_principal_estendido
            ;;
        *)
            echo -e "$vermelho Opção inválida! $reset"
            sleep 2
            menu_monitoramento
            ;;
    esac
}

## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##
##                                     INÍCIO DO SCRIPT                                       ##
## // ## // ## // ## // ## // ## // ## // ## //## // ## // ## // ## // ## // ## // ## // ## // ##

# Verificar se o script está sendo executado como root
if [ "$EUID" -ne 0 ]; then
    echo -e "$vermelho Este script precisa ser executado como root (use sudo). $reset"
    exit 1
fi

# Criar diretório principal
mkdir -p $DIR_HYPE/apps

# Exibir informações de direitos autorais
direitos_setup

# Instalar dependências
nome_atualizando
apt-get update > /dev/null 2>&1
apt-get install -y curl apache2-utils htop iftop nload > /dev/null 2>&1
instalar_docker

# Iniciar menu principal estendido
menu_principal_estendido